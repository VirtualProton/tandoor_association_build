// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model MemberIdTracker {
  id      Int @id @default(1)
  year    Int @unique
  counter Int
}

model MemberBillIdTracker {
  id      Int @id @default(1)
  year    Int @unique
  counter Int
}

model LabourIdTracker {
  id      Int @id @default(1)
  year    Int @unique
  counter Int
}

model VehicleIdTracker {
  id      Int @id @default(1)
  year    Int @unique
  counter Int
}

model LeaseQueryIdTracker {
  id      Int @id @default(1)
  year    Int @unique
  counter Int
}

//User Table
model User {
  id        Int      @id @default(autoincrement())
  fullName  String   @db.VarChar(50)
  gender    Gender   @default(MALE)
  email     String?  @unique @db.VarChar(100)
  phone     String   @unique @db.VarChar(15)
  role      Role
  status    Status   @default(ACTIVE)
  createdBy Int?     @db.Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdByUser                  User?                   @relation("CreatedByRelation", fields: [createdBy], references: [id], onDelete: SetNull)
  createdUsers                   User[]                  @relation("CreatedByRelation")
  meetings                       Meetings[]              @relation("Meetings")
  membersModified                Members[]               @relation("membersModified")
  labourModifiedBy               Labours[]               @relation("Labours")
  approvedOrDeclinedMembers      Members[]               @relation("ApprovedOrDeclinedRelation")
  meetingModifiedBy              Meetings[]              @relation("MeetingModifiedBy")
  vehiclesCreatedBy              Vehicles[]              @relation("vehiclesCreatedBy")
  vehiclesModifiedBy             Vehicles[]              @relation("vehiclesModifiedBy")
  memberChangesApprovedBy        MembersPendingChanges[] @relation("memberChangesApprovedBy")
  memberModifiedByEditor         MembersPendingChanges[] @relation("memberModifiedByEditor")
  labourModifiedByEditor         LaboursPendingChanges[] @relation("LabourModifiedByEditor")
  labourChangesApprovedBy        LaboursPendingChanges[] @relation("labourChangesApprovedBy")
  memberBillingHistoryCreatedBy  MemberBillingHistory[]  @relation("MemberBillingHistoryCreatedBy")
  memberBillingHistoryModifiedBy MemberBillingHistory[]  @relation("MemberBillingHistoryModifiedBy")
  leaseQueryModifiedBy           LeaseQuery[]            @relation("LeaseQueryModifiedBy")
  leaseQueryCreatedBy            LeaseQuery[]            @relation("LeaseQueryCreatedBy")

  @@map("users")
}

model Members {
  id                  Int              @id @default(autoincrement())
  membershipId        String           @unique @db.VarChar(225)
  approvalStatus      ApprovalStatus   @default(PENDING)
  membershipStatus    MembershipStatus @default(INACTIVE)
  nextDueDate         DateTime?
  isPaymentDue        Bool             @default(TRUE)
  doj                 DateTime         @default(now())
  electricalUscNumber String           @db.VarChar(225)
  scNumber            String           @db.VarChar(225)
  applicantName       String           @db.VarChar(50)
  relation            GuardianRelation @default(SO)
  relativeName        String           @db.VarChar(50)
  gender              Gender           @default(MALE)
  firmName            String           @db.VarChar(50)
  proprietorName      String           @db.VarChar(50)
  proprietorStatus    OwnershipType    @default(OWNER)
  proprietorType      BusinessType     @default(OWNED)
  sanctionedHP        Decimal          @db.Decimal(10, 2)
  // officeNumber          String           @db.VarChar(15)
  phoneNumber1        String           @db.VarChar(15)
  phoneNumber2        String?          @db.VarChar(15)
  surveyNumber        String           @db.VarChar(100)
  village             String           @db.VarChar(50)
  zone                String           @db.VarChar(50)
  mandal              String           @db.VarChar(50)
  district            String           @db.VarChar(50)
  state               String           @db.VarChar(50)
  pinCode             String           @db.VarChar(10)

  estimatedMaleWorker   Int       @default(0)
  estimatedFemaleWorker Int       @default(0)
  modifiedBy            Int?
  approvedOrDeclinedBy  Int?      @db.Int
  approvedOrDeclinedAt  DateTime?
  declineReason         String?   @db.Text
  createdAt             DateTime  @default(now())
  modifiedAt            DateTime  @updatedAt

  machineryInformations    MachineryInformations[]   @relation("MemberMachinery")
  branches                 Branches[]                @relation("Branches")
  complianceDetails        ComplianceDetails?        @relation("ComplianceDetails")
  similarMembershipInquiry SimilarMembershipInquiry? @relation("SimilarMembershipInquiry")
  attachments              Attachments[]             @relation("Attachments")
  proposedMember1          Proposer[]                @relation("ProposedMember1")
  proposedMember2          ExecutiveProposer[]       @relation("ProposedMember2")
  proposer                 Proposer?                 @relation("ValidProposer")
  executiveProposer        ExecutiveProposer?        @relation("ExecutiveProposer")
  declarations             Declarations?             @relation("Declarations")
  partnerDetails           PartnerDetails[]          @relation("PartnerDetails")
  memberBillingHistory     MemberBillingHistory[]    @relation("MemberBillingHistory")
  labours                  Labours[]                 @relation("Labours")
  labourHistory            LabourHistory[]           @relation("LabourHistory")
  meetingAttendees         MeetingAttendees[]        @relation("MeetingAttendees")
  userModified             User?                     @relation("membersModified", fields: [modifiedBy], references: [id], onDelete: SetNull)
  membersPendingChanges    MembersPendingChanges[]   @relation("MembersPendingChanges")
  approvedOrDeclinedByUser User?                     @relation("ApprovedOrDeclinedRelation", fields: [approvedOrDeclinedBy], references: [id], onDelete: SetNull)
  leaseQuery               LeaseQuery[]              @relation("LeaseQuery")

  @@index([id, membershipId, electricalUscNumber, scNumber])
  @@map("members")
}

model PartnerDetails {
  id              Int      @id @default(autoincrement())
  membershipId    String   @db.VarChar(225)
  partnerName     String   @db.VarChar(50)
  partnerAadharNo String   @db.VarChar(15)
  partnerPanNo    String   @db.VarChar(12)
  contactNumber   String   @db.VarChar(13)
  emailId         String   @db.VarChar(50)
  createdAt       DateTime @default(now())
  modifiedAt      DateTime @updatedAt

  members Members? @relation("PartnerDetails", fields: [membershipId], references: [membershipId], onDelete: Cascade)

  @@map("partner_details")
}

model MachineryInformations {
  id           Int      @id @default(autoincrement())
  membershipId String?  @db.VarChar(225)
  branchId     Int?     @db.Int // Reference to Branches
  machineName  String   @db.VarChar(50)
  machineCount Int      @default(0)
  createdAt    DateTime @default(now())
  modifiedAt   DateTime @updatedAt

  members  Members?  @relation("MemberMachinery", fields: [membershipId], references: [membershipId], onDelete: Cascade)
  branches Branches? @relation("BranchMachinery", fields: [branchId], references: [id], onDelete: Cascade)

  @@index([id, membershipId])
  // @@unique([membershipId,branchId, machineName])  
  @@map("machinery_information")
}

model Branches {
  id                  Int      @id @default(autoincrement())
  membershipId        String   @db.VarChar(225)
  electricalUscNumber String   @unique @db.VarChar(225)
  scNumber            String   @unique @db.VarChar(225)
  proprietorType      String   @db.VarChar(50)
  proprietorStatus    String   @db.VarChar(50)
  placeOfBusiness     String   @db.VarChar(50)
  // surveyNumber        Int           @unique @db.Int
  // village             String        @db.VarChar(50)
  // zone                String        @db.VarChar(50)
  // ownershipType       OwnershipType @default(OWNER)
  // businessType        BusinessType  @default(OWN_BUSINESS)
  sanctionedHP        Decimal  @db.Decimal(10, 2)
  createdAt           DateTime @default(now())
  modifiedAt          DateTime @updatedAt

  members               Members                 @relation("Branches", fields: [membershipId], references: [membershipId], onDelete: Cascade)
  machineryInformations MachineryInformations[] @relation("BranchMachinery")

  @@index([id, membershipId, electricalUscNumber, scNumber])
  @@map("branches")
}

model ComplianceDetails {
  id           Int    @id @default(autoincrement())
  membershipId String @unique

  gstInNumber          String @unique @db.VarChar(50)
  gstInCertificatePath String @db.VarChar(225)

  factoryLicenseNumber String @unique @db.VarChar(50)
  factoryLicensePath   String @db.VarChar(225)

  tspcbOrderNumber     String @unique @db.VarChar(50)
  tspcbCertificatePath String @db.VarChar(225)

  mdlNumber          String @unique @db.VarChar(50)
  mdlCertificatePath String @db.VarChar(225)

  udyamCertificateNumber String @unique @db.VarChar(50)
  udyamCertificatePath   String @db.VarChar(225)

  fullAddress   String @unique @db.VarChar(225)
  partnerName   String @db.VarChar(50)
  contactNumber String @db.VarChar(13)
  AadharNumber  String @db.VarChar(15)
  emailId       String @db.VarChar(50)
  panNumber     String @unique @db.VarChar(12)

  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt
  members    Members  @relation("ComplianceDetails", fields: [membershipId], references: [membershipId], onDelete: Cascade)

  @@map("compliance_details")
}

model SimilarMembershipInquiry {
  id                       Int      @id @default(autoincrement())
  membershipId             String   @unique
  is_member_of_similar_org Bool     @default(FALSE)
  has_applied_earlier      Bool     @default(FALSE)
  is_valid_member          Bool     @default(FALSE)
  is_executive_member      Bool     @default(FALSE)
  createdAt                DateTime @default(now())
  modifiedAt               DateTime @updatedAt
  members                  Members  @relation("SimilarMembershipInquiry", fields: [membershipId], references: [membershipId], onDelete: Cascade)

  @@map("similar_membership_inquiry")
}

model Attachments {
  id Int @id @default(autoincrement())

  membershipId String   @db.VarChar(225)
  // attachmentType AttachmentType @default(SALE_DEED)
  documentName String   @db.VarChar(50)
  documentPath String   @db.VarChar(225)
  // filePath       String         @db.VarChar(225)
  createdAt    DateTime @default(now())
  modifiedAt   DateTime @updatedAt
  members      Members  @relation("Attachments", fields: [membershipId], references: [membershipId], onDelete: Cascade)

  @@unique([membershipId, documentName]) // Ensures a unique entry per membership and document name
  @@index([id])
  @@index([membershipId])
  @@map("attachments")
}

model Proposer {
  id            Int      @id @default(autoincrement())
  membershipId  String   @unique @db.VarChar(225)
  // proposerType  ProposerType?
  proposerID    String?  @db.VarChar(225)
  // proposerName     String       @db.VarChar(50)
  // proposerFirmName String       @db.VarChar(100)
  // address          String       @db.VarChar(225)
  signaturePath String?  @db.VarChar(255)
  createdAt     DateTime @default(now())
  modifiedAt    DateTime @updatedAt

  proposer        Members  @relation("ValidProposer", fields: [membershipId], references: [membershipId], onDelete: Cascade)
  proposedMember1 Members? @relation("ProposedMember1", fields: [proposerID], references: [membershipId], onDelete: Cascade)

  @@map("proposers")
}

model ExecutiveProposer {
  id           Int     @id @default(autoincrement())
  membershipId String  @unique
  // proposerType ProposerType?
  proposerID   String? @db.VarChar(225)

  // proposerName     String       @db.VarChar(50)
  // proposerFirmName String       @db.VarChar(100)
  // address          String       @db.VarChar(225)
  signaturePath String?  @db.VarChar(255)
  createdAt     DateTime @default(now())
  modifiedAt    DateTime @updatedAt

  proposer       Members  @relation("ExecutiveProposer", fields: [membershipId], references: [membershipId], onDelete: Cascade)
  proposedMember Members? @relation("ProposedMember2", fields: [proposerID], references: [membershipId], onDelete: Cascade)

  @@map("executive_proposers")
}

model Declarations {
  id                       Int      @id @default(autoincrement())
  membershipId             String   @unique
  agreesToTerms            Bool     @default(FALSE)
  // partnerPhotoPath         String   @db.VarChar(225)
  membershipFormPath       String   @db.VarChar(225)
  applicationSignaturePath String   @db.VarChar(225)
  createdAt                DateTime @default(now())
  modifiedAt               DateTime @updatedAt
  members                  Members  @relation("Declarations", fields: [membershipId], references: [membershipId], onDelete: Cascade)

  @@map("declarations")
}

model MembersPendingChanges {
  id                   String         @id @default(uuid())
  membershipId         String
  approvalStatus       ApprovalStatus @default(PENDING)
  approvedOrDeclinedBy Int?           @db.Int
  updatedData          Json // Store changes as JSON
  modifiedBy           Int // User ID of the person making changes
  modifiedAt           DateTime       @default(now())
  declineReason        String?        @db.Text
  member               Members        @relation("MembersPendingChanges", fields: [membershipId], references: [membershipId], onDelete: Cascade)
  approvedByAdmin      User?          @relation("memberChangesApprovedBy", fields: [approvedOrDeclinedBy], references: [id], onDelete: SetNull)
  modifiedByEditor     User           @relation("memberModifiedByEditor", fields: [modifiedBy], references: [id], onDelete: Cascade)

  @@index([id])
  @@map("members_pending_changes")
}

model MemberBillingHistory {
  id            Int           @id @default(autoincrement())
  billingId     String        @unique @db.VarChar(225)
  membershipId  String        @db.VarChar(225)
  fromDate      DateTime      @db.DateTime()
  toDate        DateTime      @db.DateTime() // Date when the payment was made
  totalAmount   Decimal       @db.Decimal(10, 2) // Supports money
  paidAmount    Decimal       @db.Decimal(10, 2) // Amount paid
  dueAmount     Decimal       @db.Decimal(10, 2) // Amount due
  paymentStatus paymentStatus @default(DUE) // e.g., SUCCESS, PENDING, FAILED
  notes         String?       @db.Text // Optional notes
  receiptPath   String?       @db.VarChar(225) // Path to the receipt
  createdAt     DateTime      @default(now())
  modifiedAt    DateTime      @updatedAt
  createdBy     Int?          @db.Int
  modifiedBy    Int?          @db.Int
  userCreated   User?         @relation("MemberBillingHistoryCreatedBy", fields: [createdBy], references: [id], onDelete: SetNull)
  userModified  User?         @relation("MemberBillingHistoryModifiedBy", fields: [modifiedBy], references: [id], onDelete: SetNull)
  members       Members       @relation("MemberBillingHistory", fields: [membershipId], references: [membershipId], onDelete: Cascade)

  // @@unique([membershipId, month, year]) // Ensures a unique entry per month and year
  @@index([membershipId, billingId, id]) // Index for faster lookups
  @@map("member_billing_history")
}

model Labours {
  id               Int          @id @default(autoincrement())
  labourId         String       @unique @db.VarChar(225)
  fullName         String       @db.VarChar(100)
  fatherName       String       @db.VarChar(100)
  dob              String       @db.VarChar(50)
  phoneNumber      String       @unique @db.VarChar(13)
  emailId          String?      @unique @db.VarChar(50)
  aadharNumber     String       @unique @db.VarChar(12)
  permanentAddress String       @db.VarChar(225)
  presentAddress   String       @db.VarChar(225)
  photoPath        String       @db.VarChar(225)
  aadharPath       String?      @db.VarChar(225)
  eShramId         String?      @unique @db.VarChar(50)
  panNumber        String       @unique @db.VarChar(12)
  esiNumber        String?      @db.VarChar(50)
  // onBench           Bool         @default(FALSE)
  labourStatus     labourStatus @default(ACTIVE)

  assignedTo String? @db.VarChar(225)

  // employedIn            String                  @db.VarChar(100)
  // employedFrom          DateTime                @default(now())  
  // signaturePath         String                  @db.VarChar(225)
  // fingerPrint           String                  @db.VarChar(225)
  // aadharPhotoPath       String                  @db.VarChar(225)
  // livePhotoPath         String                  @db.VarChar(225)
  // isActive              Bool                    @default(TRUE)
  createdAt             DateTime                @default(now())
  modifiedAt            DateTime                @updatedAt
  modifiedBy            Int?                    @db.Int
  modifiedByUser        User?                   @relation("Labours", fields: [modifiedBy], references: [id], onDelete: SetNull)
  laboursAdditionalDocs LaboursAdditionalDocs[] @relation("LaboursAdditionalDocs")

  members          Members?                @relation("Labours", fields: [assignedTo], references: [membershipId], onDelete: Cascade)
  meetingAttendees MeetingAttendees[]      @relation("MeetingAttendees")
  LabourHistory    LabourHistory[]
  pendingChanges   LaboursPendingChanges[] @relation("LaboursPendingChanges")

  @@map("labours")
}

model LaboursAdditionalDocs {
  id          Int      @id @default(autoincrement())
  labourId    String   @db.VarChar(225)
  docName     String   @db.VarChar(50)
  docFilePath String   @db.VarChar(100)
  createdAt   DateTime @default(now())

  labours Labours @relation("LaboursAdditionalDocs", fields: [labourId], references: [labourId], onDelete: Cascade)

  @@unique([labourId, docName]) // Ensures a unique entry per labour and document name
  @@index([labourId]) // Index for faster lookups
  @@map("labours_additional_docs")
}

model LaboursPendingChanges {
  id                   String         @id @default(uuid())
  labourId             String
  approvalStatus       ApprovalStatus @default(PENDING)
  approvedOrDeclinedBy Int?           @db.Int
  updatedData          Json // Store changes as JSON
  modifiedBy           Int // User ID of the person making changes
  modifiedAt           DateTime       @default(now())

  labour           Labours @relation("LaboursPendingChanges", fields: [labourId], references: [labourId], onDelete: Cascade)
  approvedByAdmin  User?   @relation("labourChangesApprovedBy", fields: [approvedOrDeclinedBy], references: [id], onDelete: SetNull)
  modifiedByEditor User    @relation("LabourModifiedByEditor", fields: [modifiedBy], references: [id], onDelete: Cascade)

  @@map("labours_pending_changes")
}

model LabourHistory {
  Id                Int       @id @default(autoincrement())
  labourId          String    @db.VarChar(225)
  assignedTo        String?   @db.VarChar(225)
  onBench           Bool      @default(TRUE)
  reasonForTransfer String?   @db.VarChar(225)
  fromDate          DateTime  @default(now())
  toDate            DateTime?
  createdAt         DateTime  @default(now())

  labours Labours  @relation(fields: [labourId], references: [labourId], onDelete: Cascade)
  members Members? @relation("LabourHistory", fields: [assignedTo], references: [membershipId], onDelete: Cascade)

  @@map("labour_history")
}

model Vehicles {
  id                Int           @id @default(autoincrement())
  vehicleId         String        @unique @db.VarChar(225)
  vehicleNumber     String        @unique @db.VarChar(20)
  status            VehicleStatus @default(ACTIVE)
  driverName        String        @db.VarChar(50)
  driverPhoneNumber String        @db.VarChar(13)
  ownerName         String        @db.VarChar(50)
  ownerPhoneNumber  String        @db.VarChar(13)

  createdBy        Int?               @db.Int
  modifiedBy       Int?               @db.Int
  vehicleType      String?            @db.VarChar(50)
  createdAt        DateTime           @default(now())
  modifiedAt       DateTime           @updatedAt
  tripRecords      TripRecords[]      @relation("TripRecord")
  meetingAttendees MeetingAttendees[] @relation("MeetingAttendees")
  userCreated      User?              @relation("vehiclesCreatedBy", fields: [createdBy], references: [id], onDelete: SetNull)
  userModified     User?              @relation("vehiclesModifiedBy", fields: [modifiedBy], references: [id], onDelete: SetNull)

  @@map("vehicles")
}

model TripRecords {
  id            Int                  @id @default(autoincrement())
  vehicleId     String               @db.VarChar(225)
  tripDate      DateTime             @db.DateTime()
  amountPerTrip Float                @default(0.0)
  numberOfTrips Int                  @default(0)
  totalAmount   Float                @default(0.0)
  amountPaid    Float                @default(0.0)
  balanceAmount Float                @default(0.0)
  paymentStatus VehiclePaymentStatus @default(UNPAID)
  notes         String?              @db.Text // <-- Optional
  receiptPath   String?              @db.VarChar(255) // <-- Optional
  createdAt     DateTime             @default(now())
  modifiedAt    DateTime             @updatedAt

  vehicles Vehicles? @relation("TripRecord", fields: [vehicleId], references: [vehicleId], onDelete: Cascade)

  @@map("trip_record")
}

model Meetings {
  id             String        @id @default(uuid())
  title          String        @db.VarChar(255)
  agenda         String?       @db.Text
  notes          String?       @db.Text
  startTime      DateTime
  endTime        DateTime
  location       String?       @db.VarChar(255)
  status         MeetingStatus @default(SCHEDULED)
  createdBy      Int           @db.Int
  attendees      Json          @db.Json // List of members, vehicles, and labours
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  modifiedBy     Int?          @db.Int
  modifiedByUser User?         @relation("MeetingModifiedBy", fields: [modifiedBy], references: [id], onDelete: SetNull)

  User             User               @relation("Meetings", fields: [createdBy], references: [id], onDelete: Cascade)
  meetingAttendees MeetingAttendees[] @relation("MeetingAttendees")
  followUpMeetings FollowUpMeeting[]  @relation("FollowUpMeetings")

  @@map("meetings")
}

model FollowUpMeeting {
  id        String   @id @default(uuid())
  meetingId String   @db.VarChar(36)
  dateTime  DateTime
  createdAt DateTime @default(now())
  meeting   Meetings @relation("FollowUpMeetings", fields: [meetingId], references: [id], onDelete: Cascade)

  @@map("follow_up_meetings")
}

model MeetingAttendees {
  id           Int          @id @default(autoincrement())
  meetingId    String       @db.VarChar(225)
  membershipId String?      @db.VarChar(225) // Reference to Members
  vehicleId    String?      @db.VarChar(225) // Reference to Vehicles
  vehicleRole  VehicleRole? // NEW: specifies whether vehicle is owner or driver
  labourId     String?      @db.VarChar(225) // Reference to Labours
  isCustom     Bool         @default(FALSE) // True if manually added
  createdAt    DateTime     @default(now())

  meeting Meetings  @relation("MeetingAttendees", fields: [meetingId], references: [id], onDelete: Cascade)
  member  Members?  @relation("MeetingAttendees", fields: [membershipId], references: [membershipId], onDelete: Cascade)
  vehicle Vehicles? @relation("MeetingAttendees", fields: [vehicleId], references: [vehicleId], onDelete: Cascade)
  labour  Labours?  @relation("MeetingAttendees", fields: [labourId], references: [labourId], onDelete: Cascade)

  @@unique([meetingId, membershipId, vehicleId]) // Ensures a unique entry per meeting
  @@map("meeting_attendees")
}

model LeaseQuery {
  id                 Int       @id @default(autoincrement())
  leaseQueryId            String    @unique @db.VarChar(225)
  membershipId       String    @db.VarChar(225)
  presentLeaseHolder String    @db.VarChar(50)
  dateOfLease        DateTime  @db.DateTime()
  expiryOfLease      DateTime  @db.DateTime()
  dateOfRenewal      DateTime? @db.DateTime()
  status             leaseQueryStatus    @default(PENDING)
  createdAt         DateTime  @default(now())
  createdBy         Int?      @db.Int
  createdByUser     User?     @relation("LeaseQueryCreatedBy", fields: [createdBy], references: [id], onDelete: SetNull)
  modifiedAt        DateTime  @updatedAt
  modifiedBy        Int?      @db.Int
  modifiedByUser    User?     @relation("LeaseQueryModifiedBy", fields: [modifiedBy], references: [id], onDelete: SetNull)
  members           Members   @relation("LeaseQuery", fields: [membershipId], references: [membershipId], onDelete: Cascade)

  leaseQueryAttachments LeaseQueryAttachments[] @relation("LeaseQueryAttachments")
  @@map("lease_queries")
}

model LeaseQueryAttachments {
  id          Int      @id @default(autoincrement())
  leaseQueryId     String   @db.VarChar(225)
  documentName String   @db.VarChar(225)
  documentPath String   @db.VarChar(225)
  createdAt   DateTime @default(now())
  leaseQuery LeaseQuery @relation("LeaseQueryAttachments", fields: [leaseQueryId], references: [leaseQueryId], onDelete: Cascade)

  // @@unique([leaseQueryId, documentName]) // Ensures a unique entry per lease and document name
  @@index([leaseQueryId])
  @@map("lease_query_attachments")
}

enum leaseQueryStatus {
  PENDING
  PROCESSING
  RESOLVED
  REJECTED
}

enum VehicleRole {
  OWNER
  DRIVER
  BOTH // For cases where a vehicle has both an owner and a driver 
}

enum MeetingStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum Role {
  ADMIN
  ADMIN_VIEWER
  TSMWA_EDITOR
  TSMWA_VIEWER
  TQMA_EDITOR
  TQMA_VIEWER
}

enum Status {
  ACTIVE
  INACTIVE
}

enum VehicleStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

enum GuardianRelation {
  SO // S/O (Son of)
  DO // D/O (Daughter of)
  WO // W/O (Wife of)
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum MembershipStatus {
  ACTIVE
  INACTIVE
  CANCELLED
}

enum OwnershipType {
  OWNER
  TENANT
  TRADER
}

enum BusinessType {
  OWNED
  RENTED
  TRADER
  FACTORY_GIVEN_ON_LEASE
}

enum Bool {
  TRUE
  FALSE
}

enum AttachmentType {
  SALE_DEED
  ELECTRICITY_BILL
  RENTAL_DEED
  PARTNERSHIP_DEED
  PHOTOS
  DOCUMENTS
}

enum ProposerType {
  FACTORY_OWNER
  EXECUTIVE_MEMBER
}

enum paymentStatus {
  DUE
  PARTIAL
  PAID
}

enum VehiclePaymentStatus {
  UNPAID
  PARTIAL
  PAID
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum ApprovalStatus {
  PENDING
  APPROVED
  DECLINED
}

enum labourStatus {
  ACTIVE
  INACTIVE
  ON_BENCH
}
